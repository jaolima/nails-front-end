{"ast":null,"code":"import _regeneratorRuntime from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\WorkSpace\\\\Freelancer\\\\nails-factory\\\\multikart_react_all_in_one\\\\frontend\\\\helpers\\\\apollo\\\\apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient({}, ctx.req && ctx.req.headers.cookie); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import('@apollo/react-ssr');\n\n              case 14:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 15\n                  }\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: process.env.API_URL,\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/helpers/apollo/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","headers","cookie","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","process","env","API_URL","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nlet apolloClient = null;\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n    const client = apolloClient || initApolloClient(apolloState);\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <PageComponent {...pageProps} />\r\n      </ApolloProvider>\r\n    );\r\n  };\r\n\r\n  // Set the correct displayName in development\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const displayName =\r\n      PageComponent.displayName || PageComponent.name || 'Component';\r\n\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.');\r\n    }\r\n\r\n    WithApollo.displayName = `withApollo(${displayName})`;\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async ctx => {\r\n      const { AppTree } = ctx;\r\n\r\n      // Initialize ApolloClient, add it to the ctx object so\r\n      // we can use it in `PageComponent.getInitialProp`.\r\n      const apolloClient = (ctx.apolloClient = initApolloClient({}, ctx.req && ctx.req.headers.cookie))\r\n\r\n      // Run wrapped getInitialProps methods\r\n      let pageProps = {};\r\n      if (PageComponent.getInitialProps) {\r\n        pageProps = await PageComponent.getInitialProps(ctx);\r\n      }\r\n\r\n      // Only on the server:\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (ctx.res && ctx.res.finished) {\r\n          return pageProps;\r\n        }\r\n\r\n        // Only if ssr is enabled\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr');\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n              />\r\n            );\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error);\r\n          }\r\n\r\n          // getDataFromTree does not call componentWillUnmount\r\n          // head side effect therefore need to be cleared manually\r\n          Head.rewind();\r\n        }\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract();\r\n\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n      };\r\n    };\r\n  }\r\n\r\n  return WithApollo;\r\n}\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\r\nfunction initApolloClient(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = createApolloClient(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\r\nfunction createApolloClient(initialState = {}) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: process.env.API_URL, // Server URL (must be absolute)\r\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\r\n      fetch,\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}