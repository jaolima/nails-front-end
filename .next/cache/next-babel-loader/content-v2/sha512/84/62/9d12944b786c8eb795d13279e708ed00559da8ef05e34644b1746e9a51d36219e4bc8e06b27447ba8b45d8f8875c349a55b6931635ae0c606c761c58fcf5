{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkSpace\\\\Freelancer\\\\nails-factory\\\\multikart_react_all_in_one\\\\frontend\\\\components\\\\common\\\\Collections\\\\Collection12.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useContext } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport CartContext from \"../../../helpers/cart\";\nimport Masonry from \"react-masonry-css\";\nimport { WishlistContext } from \"../../../helpers/wishlist/WishlistContext\";\nimport ProductBox from \"../product-box/ProductBox9\";\nimport { CompareContext } from \"../../../helpers/Compare/CompareContext\";\nconst GET_PRODUCTS = gql`\n  query products($type: _CategoryType!, $indexFrom: Int!, $limit: Int!) {\n    products(type: $type, indexFrom: $indexFrom, limit: $limit) {\n      items {\n        id\n        title\n        description\n        type\n        brand\n        category\n        price\n        new\n        sale\n        stock\n        discount\n        variants {\n          id\n          sku\n          size\n          color\n          image_id\n        }\n        images {\n          image_id\n          id\n          alt\n          src\n        }\n      }\n    }\n  }\n`;\n\nconst ProductsCollection = ({\n  type,\n  col\n}) => {\n  const cartContext = useContext(CartContext);\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const quantity = cartContext.quantity;\n  var {\n    data\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20\n    }\n  });\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    className: \"portfolio-section portfolio-padding metro-section port-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Container, {\n    fluid: col == \"full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(Masonry, {\n    breakpointCols: col == \"metro\" ? 4 : 6,\n    className: \"isotopeContainer row\",\n    columnClassName: `isotopeSelector ${col == \"metro\" ? \"col-xl-3 col-sm-6\" : \"col-xl-2 col-lg-3 col-md-4 col-sm-6\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, data && data.products.items.slice(0, 20).map((product, index) => __jsx(ProductBox, {\n    product: product,\n    addCart: () => cartContext.addToCart(product, quantity),\n    addWish: () => wishlistContext.addToWish(product),\n    addCompare: () => compareContext.addToCompare(product),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }))))));\n};\n\nexport default ProductsCollection;","map":{"version":3,"sources":["C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/components/common/Collections/Collection12.js"],"names":["React","Fragment","useContext","Container","useQuery","gql","CartContext","Masonry","WishlistContext","ProductBox","CompareContext","GET_PRODUCTS","ProductsCollection","type","col","cartContext","wishlistContext","compareContext","quantity","data","variables","indexFrom","limit","products","items","slice","map","product","index","addToCart","addToWish","addToCompare"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AAEA,MAAMC,YAAY,GAAGN,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BA;;AAiCA,MAAMO,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAmB;AAC5C,QAAMC,WAAW,GAAGb,UAAU,CAACI,WAAD,CAA9B;AACA,QAAMU,eAAe,GAAGd,UAAU,CAACM,eAAD,CAAlC;AACA,QAAMS,cAAc,GAAGf,UAAU,CAACQ,cAAD,CAAjC;AACA,QAAMQ,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AAEA,MAAI;AAAEC,IAAAA;AAAF,MAAWf,QAAQ,CAACO,YAAD,EAAe;AACpCS,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IADG;AAETQ,MAAAA,SAAS,EAAE,CAFF;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADyB,GAAf,CAAvB;AAQA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,4DAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAER,GAAG,IAAI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,cAAc,EAAEA,GAAG,IAAI,OAAP,GAAiB,CAAjB,GAAqB,CADvC;AAEE,IAAA,SAAS,EAAC,sBAFZ;AAGE,IAAA,eAAe,EAAG,mBAChBA,GAAG,IAAI,OAAP,GACI,mBADJ,GAEI,qCACL,EAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGK,IAAI,IACHA,IAAI,CAACI,QAAL,CAAcC,KAAd,CACGC,KADH,CACS,CADT,EACY,EADZ,EAEGC,GAFH,CAEO,CAACC,OAAD,EAAUC,KAAV,KACH,MAAC,UAAD;AACE,IAAA,OAAO,EAAED,OADX;AAEE,IAAA,OAAO,EAAE,MAAMZ,WAAW,CAACc,SAAZ,CAAsBF,OAAtB,EAA+BT,QAA/B,CAFjB;AAGE,IAAA,OAAO,EAAE,MAAMF,eAAe,CAACc,SAAhB,CAA0BH,OAA1B,CAHjB;AAIE,IAAA,UAAU,EAAE,MAAMV,cAAc,CAACc,YAAf,CAA4BJ,OAA5B,CAJpB;AAKE,IAAA,GAAG,EAAEC,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAVJ,CADF,CADF,CADF,CADF;AA8BD,CA5CD;;AA8CA,eAAehB,kBAAf","sourcesContent":["import React, { Fragment, useContext } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport CartContext from \"../../../helpers/cart\";\nimport Masonry from \"react-masonry-css\";\nimport { WishlistContext } from \"../../../helpers/wishlist/WishlistContext\";\nimport ProductBox from \"../product-box/ProductBox9\";\nimport { CompareContext } from \"../../../helpers/Compare/CompareContext\";\n\nconst GET_PRODUCTS = gql`\n  query products($type: _CategoryType!, $indexFrom: Int!, $limit: Int!) {\n    products(type: $type, indexFrom: $indexFrom, limit: $limit) {\n      items {\n        id\n        title\n        description\n        type\n        brand\n        category\n        price\n        new\n        sale\n        stock\n        discount\n        variants {\n          id\n          sku\n          size\n          color\n          image_id\n        }\n        images {\n          image_id\n          id\n          alt\n          src\n        }\n      }\n    }\n  }\n`;\n\nconst ProductsCollection = ({ type, col }) => {\n  const cartContext = useContext(CartContext);\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const quantity = cartContext.quantity;\n\n  var { data } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20,\n    },\n  });\n\n  return (\n    <Fragment>\n      <section className=\"portfolio-section portfolio-padding metro-section port-col\">\n        <Container fluid={col == \"full\"}>\n          <Masonry\n            breakpointCols={col == \"metro\" ? 4 : 6}\n            className=\"isotopeContainer row\"\n            columnClassName={`isotopeSelector ${\n              col == \"metro\"\n                ? \"col-xl-3 col-sm-6\"\n                : \"col-xl-2 col-lg-3 col-md-4 col-sm-6\"\n            }`}\n          >\n            {data &&\n              data.products.items\n                .slice(0, 20)\n                .map((product, index) => (\n                  <ProductBox\n                    product={product}\n                    addCart={() => cartContext.addToCart(product, quantity)}\n                    addWish={() => wishlistContext.addToWish(product)}\n                    addCompare={() => compareContext.addToCompare(product)}\n                    key={index}\n                  />\n                ))}\n          </Masonry>\n        </Container>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default ProductsCollection;\n"]},"metadata":{},"sourceType":"module"}