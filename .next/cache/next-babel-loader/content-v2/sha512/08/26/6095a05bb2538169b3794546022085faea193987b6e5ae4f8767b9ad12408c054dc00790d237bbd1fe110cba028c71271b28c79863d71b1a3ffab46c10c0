{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkSpace\\\\Freelancer\\\\nails-factory\\\\multikart_react_all_in_one\\\\frontend\\\\helpers\\\\apollo\\\\apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null;\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient({}, ctx.req && ctx.req.headers.cookie); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: process.env.API_URL,\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/helpers/apollo/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","headers","cookie","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","process","env","API_URL","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nlet apolloClient = null;\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n    const client = apolloClient || initApolloClient(apolloState);\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <PageComponent {...pageProps} />\r\n      </ApolloProvider>\r\n    );\r\n  };\r\n\r\n  // Set the correct displayName in development\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const displayName =\r\n      PageComponent.displayName || PageComponent.name || 'Component';\r\n\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.');\r\n    }\r\n\r\n    WithApollo.displayName = `withApollo(${displayName})`;\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async ctx => {\r\n      const { AppTree } = ctx;\r\n\r\n      // Initialize ApolloClient, add it to the ctx object so\r\n      // we can use it in `PageComponent.getInitialProp`.\r\n      const apolloClient = (ctx.apolloClient = initApolloClient({}, ctx.req && ctx.req.headers.cookie))\r\n\r\n      // Run wrapped getInitialProps methods\r\n      let pageProps = {};\r\n      if (PageComponent.getInitialProps) {\r\n        pageProps = await PageComponent.getInitialProps(ctx);\r\n      }\r\n\r\n      // Only on the server:\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (ctx.res && ctx.res.finished) {\r\n          return pageProps;\r\n        }\r\n\r\n        // Only if ssr is enabled\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr');\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n              />\r\n            );\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error);\r\n          }\r\n\r\n          // getDataFromTree does not call componentWillUnmount\r\n          // head side effect therefore need to be cleared manually\r\n          Head.rewind();\r\n        }\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract();\r\n\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n      };\r\n    };\r\n  }\r\n\r\n  return WithApollo;\r\n}\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\r\nfunction initApolloClient(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = createApolloClient(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\r\nfunction createApolloClient(initialState = {}) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: process.env.API_URL, // Server URL (must be absolute)\r\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\r\n      fetch,\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}