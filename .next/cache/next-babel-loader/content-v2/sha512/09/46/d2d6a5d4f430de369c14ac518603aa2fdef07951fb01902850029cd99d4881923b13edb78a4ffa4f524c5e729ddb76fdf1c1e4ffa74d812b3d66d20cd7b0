{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\WorkSpace\\\\Freelancer\\\\nails-factory\\\\multikart_react_all_in_one\\\\frontend\\\\components\\\\common\\\\Collections\\\\Collection12.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query products($type: _CategoryType!, $indexFrom: Int!, $limit: Int!) {\\n    products(type: $type, indexFrom: $indexFrom, limit: $limit) {\\n      items {\\n        id\\n        title\\n        description\\n        type\\n        brand\\n        category\\n        price\\n        new\\n        sale\\n        stock\\n        discount\\n        variants {\\n          id\\n          sku\\n          size\\n          color\\n          image_id\\n        }\\n        images {\\n          image_id\\n          id\\n          alt\\n          src\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment, useContext } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport CartContext from \"../../../helpers/cart\";\nimport Masonry from \"react-masonry-css\";\nimport { WishlistContext } from \"../../../helpers/wishlist/WishlistContext\";\nimport ProductBox from \"../product-box/ProductBox9\";\nimport { CompareContext } from \"../../../helpers/Compare/CompareContext\";\nvar GET_PRODUCTS = gql(_templateObject());\n\nvar ProductsCollection = function ProductsCollection(_ref) {\n  _s();\n\n  var type = _ref.type,\n      col = _ref.col;\n  var cartContext = useContext(CartContext);\n  var wishlistContext = useContext(WishlistContext);\n  var compareContext = useContext(CompareContext);\n  var quantity = cartContext.quantity;\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20\n    }\n  }),\n      data = _useQuery.data;\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    className: \"portfolio-section portfolio-padding metro-section port-col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Container, {\n    fluid: col == \"full\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(Masonry, {\n    breakpointCols: col == \"metro\" ? 4 : 6,\n    className: \"isotopeContainer row\",\n    columnClassName: \"isotopeSelector \".concat(col == \"metro\" ? \"col-xl-3 col-sm-6\" : \"col-xl-2 col-lg-3 col-md-4 col-sm-6\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, data && data.products.items.slice(0, 20).map(function (product, index) {\n    return __jsx(ProductBox, {\n      product: product,\n      addCart: function addCart() {\n        return cartContext.addToCart(product, quantity);\n      },\n      addWish: function addWish() {\n        return wishlistContext.addToWish(product);\n      },\n      addCompare: function addCompare() {\n        return compareContext.addToCompare(product);\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    });\n  })))));\n};\n\n_s(ProductsCollection, \"qaoXj/YIs/Gi8N0j9NpccTXM6DQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsCollection;\nexport default ProductsCollection;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsCollection\");","map":{"version":3,"sources":["C:/WorkSpace/Freelancer/nails-factory/multikart_react_all_in_one/frontend/components/common/Collections/Collection12.js"],"names":["React","Fragment","useContext","Container","useQuery","gql","CartContext","Masonry","WishlistContext","ProductBox","CompareContext","GET_PRODUCTS","ProductsCollection","type","col","cartContext","wishlistContext","compareContext","quantity","variables","indexFrom","limit","data","products","items","slice","map","product","index","addToCart","addToWish","addToCompare"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AAEA,IAAMC,YAAY,GAAGN,GAAH,mBAAlB;;AAiCA,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,OAAmB;AAAA;;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC5C,MAAMC,WAAW,GAAGb,UAAU,CAACI,WAAD,CAA9B;AACA,MAAMU,eAAe,GAAGd,UAAU,CAACM,eAAD,CAAlC;AACA,MAAMS,cAAc,GAAGf,UAAU,CAACQ,cAAD,CAAjC;AACA,MAAMQ,QAAQ,GAAGH,WAAW,CAACG,QAA7B;;AAJ4C,kBAM7Bd,QAAQ,CAACO,YAAD,EAAe;AACpCQ,IAAAA,SAAS,EAAE;AACTN,MAAAA,IAAI,EAAEA,IADG;AAETO,MAAAA,SAAS,EAAE,CAFF;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADyB,GAAf,CANqB;AAAA,MAMtCC,IANsC,aAMtCA,IANsC;;AAc5C,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,4DAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAER,GAAG,IAAI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,cAAc,EAAEA,GAAG,IAAI,OAAP,GAAiB,CAAjB,GAAqB,CADvC;AAEE,IAAA,SAAS,EAAC,sBAFZ;AAGE,IAAA,eAAe,4BACbA,GAAG,IAAI,OAAP,GACI,mBADJ,GAEI,qCAHS,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGQ,IAAI,IACHA,IAAI,CAACC,QAAL,CAAcC,KAAd,CACGC,KADH,CACS,CADT,EACY,EADZ,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAUC,KAAV;AAAA,WACH,MAAC,UAAD;AACE,MAAA,OAAO,EAAED,OADX;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMZ,WAAW,CAACc,SAAZ,CAAsBF,OAAtB,EAA+BT,QAA/B,CAAN;AAAA,OAFX;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMF,eAAe,CAACc,SAAhB,CAA0BH,OAA1B,CAAN;AAAA,OAHX;AAIE,MAAA,UAAU,EAAE;AAAA,eAAMV,cAAc,CAACc,YAAf,CAA4BJ,OAA5B,CAAN;AAAA,OAJd;AAKE,MAAA,GAAG,EAAEC,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG;AAAA,GAFP,CAVJ,CADF,CADF,CADF,CADF;AA8BD,CA5CD;;GAAMhB,kB;UAMWR,Q;;;KANXQ,kB;AA8CN,eAAeA,kBAAf","sourcesContent":["import React, { Fragment, useContext } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport CartContext from \"../../../helpers/cart\";\nimport Masonry from \"react-masonry-css\";\nimport { WishlistContext } from \"../../../helpers/wishlist/WishlistContext\";\nimport ProductBox from \"../product-box/ProductBox9\";\nimport { CompareContext } from \"../../../helpers/Compare/CompareContext\";\n\nconst GET_PRODUCTS = gql`\n  query products($type: _CategoryType!, $indexFrom: Int!, $limit: Int!) {\n    products(type: $type, indexFrom: $indexFrom, limit: $limit) {\n      items {\n        id\n        title\n        description\n        type\n        brand\n        category\n        price\n        new\n        sale\n        stock\n        discount\n        variants {\n          id\n          sku\n          size\n          color\n          image_id\n        }\n        images {\n          image_id\n          id\n          alt\n          src\n        }\n      }\n    }\n  }\n`;\n\nconst ProductsCollection = ({ type, col }) => {\n  const cartContext = useContext(CartContext);\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const quantity = cartContext.quantity;\n\n  var { data } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20,\n    },\n  });\n\n  return (\n    <Fragment>\n      <section className=\"portfolio-section portfolio-padding metro-section port-col\">\n        <Container fluid={col == \"full\"}>\n          <Masonry\n            breakpointCols={col == \"metro\" ? 4 : 6}\n            className=\"isotopeContainer row\"\n            columnClassName={`isotopeSelector ${\n              col == \"metro\"\n                ? \"col-xl-3 col-sm-6\"\n                : \"col-xl-2 col-lg-3 col-md-4 col-sm-6\"\n            }`}\n          >\n            {data &&\n              data.products.items\n                .slice(0, 20)\n                .map((product, index) => (\n                  <ProductBox\n                    product={product}\n                    addCart={() => cartContext.addToCart(product, quantity)}\n                    addWish={() => wishlistContext.addToWish(product)}\n                    addCompare={() => compareContext.addToCompare(product)}\n                    key={index}\n                  />\n                ))}\n          </Masonry>\n        </Container>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default ProductsCollection;\n"]},"metadata":{},"sourceType":"module"}