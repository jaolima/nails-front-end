/// <reference types="react" />
import { ApolloClient, NormalizedCacheObject } from "@apollo/client";
import { NextPage, NextPageContext } from "next";
import { AppContext } from "next/app";
declare type WithApolloOptions = {
    apolloClient: ApolloClient<NormalizedCacheObject>;
    apolloState: NormalizedCacheObject;
};
declare type ContextWithApolloOptions = AppContext & {
    ctx: {
        apolloClient: WithApolloOptions["apolloClient"];
    };
} & NextPageContext & WithApolloOptions;
declare type ApolloClientParam = ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>);
/**
 * Installs the Apollo Client on NextPageContext
 * or NextAppContext. Useful if you want to use apolloClient
 * inside getStaticProps, getStaticPaths or getServerSideProps
 * @param {NextPageContext | AppContext} ctx
 */
export declare const initOnContext: (acp: ApolloClientParam, ctx: ContextWithApolloOptions) => ContextWithApolloOptions;
/**
 * Creates a withApollo HOC
 * that provides the apolloContext
 * to a next.js Page or AppTree.
 * @param  {Object} ac
 * @param  {Boolean} [withApolloOptions.ssr=false]
 * @returns {(PageComponent: NextPage<P>) => ComponentClass<P> | FunctionComponent<P>}
 */
export default function withApollo<P, IP>(ac: ApolloClientParam): ({ ssr }?: {
    ssr?: boolean | undefined;
}) => (PageComponent: NextPage<P, IP>) => {
    (pageProps: P & WithApolloOptions): JSX.Element;
    displayName: string;
    getInitialProps(ctx: ContextWithApolloOptions): Promise<{}>;
};
export {};
